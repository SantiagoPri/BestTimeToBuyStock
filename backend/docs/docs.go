// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "description": "Get a paginated list of stock categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "List all categories",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of categories with pagination info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/gm/week/{week}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the game master's data for a specific week",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GM Session"
                ],
                "summary": "Get week data",
                "parameters": [
                    {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Week number (1-5)",
                        "name": "week",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Week data including stock prices and news",
                        "schema": {
                            "$ref": "#/definitions/gm_session.GMWeekData"
                        }
                    },
                    "400": {
                        "description": "Invalid week number",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid session",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Week data not found",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/leaderboard": {
            "get": {
                "description": "Retrieves top 10 finished sessions ordered by total balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Game Session"
                ],
                "summary": "Get leaderboard",
                "responses": {
                    "200": {
                        "description": "Leaderboard entries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/game_session.GameSession"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/sessions": {
            "post": {
                "description": "Creates a new game session for a user with selected stock categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Game Session"
                ],
                "summary": "Create a new game session",
                "parameters": [
                    {
                        "description": "Session creation parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game_session.createSessionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Session created successfully",
                        "schema": {
                            "$ref": "#/definitions/game_session.createSessionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input - Username missing or categories != 3",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/sessions/advance": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Advances the session to the next week, updating stock prices",
                "tags": [
                    "Game Session"
                ],
                "summary": "Advance to next week",
                "responses": {
                    "200": {
                        "description": "Advanced to next week"
                    },
                    "400": {
                        "description": "Cannot advance beyond week 5",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid session",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/sessions/buy": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Purchase a specified quantity of a stock in the current session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Buy stocks",
                "parameters": [
                    {
                        "description": "Buy order details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game_session.tradeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase successful"
                    },
                    "400": {
                        "description": "Invalid input - Missing ticker or quantity",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid session",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Stock not found",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "422": {
                        "description": "Insufficient funds",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/sessions/end": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Ends the current session, selling all holdings at current prices",
                "tags": [
                    "Game Session"
                ],
                "summary": "End session",
                "responses": {
                    "202": {
                        "description": "Session ended successfully",
                        "schema": {
                            "$ref": "#/definitions/game_session.GameSession"
                        }
                    },
                    "400": {
                        "description": "Can only end session in week 5",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid session",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/sessions/sell": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Sell a specified quantity of a stock in the current session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Sell stocks",
                "parameters": [
                    {
                        "description": "Sell order details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/game_session.tradeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sale successful"
                    },
                    "400": {
                        "description": "Invalid input - Missing ticker or quantity",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid session",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Stock not found or insufficient holdings",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/sessions/state": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the current state of a game session including cash, holdings, and status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Game Session"
                ],
                "summary": "Get current session state",
                "responses": {
                    "200": {
                        "description": "Current session state",
                        "schema": {
                            "$ref": "#/definitions/game_session.GameSession"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid session",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Session not found",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/stocks": {
            "get": {
                "description": "Get a paginated list of stocks with optional filtering and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stocks"
                ],
                "summary": "List all stocks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by ticker (exact match)",
                        "name": "ticker",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name (case-insensitive partial match)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category (exact match)",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "id",
                        "description": "Sort field (id, ticker, name, category)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "asc",
                        "description": "Sort direction (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of stocks with pagination info",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/stocks/{param}": {
            "get": {
                "description": "Get a stock by its ID (19 digits) or ticker symbol (3-6 uppercase characters)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stocks"
                ],
                "summary": "Get stock by ID or ticker",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"AAPL\"",
                        "description": "Stock ID or ticker",
                        "name": "param",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stock details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid input - wrong format",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Stock not found",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "errors.Error": {
            "description": "Standard error response format",
            "type": "object",
            "properties": {
                "code": {
                    "description": "@Description The error code identifying the type of error\n@Example validation_error",
                    "type": "string"
                },
                "details": {
                    "description": "@Description Optional details about the error\n@Example Stack trace or additional context",
                    "type": "string"
                },
                "message": {
                    "description": "@Description A human-readable error message\n@Example Invalid input parameters",
                    "type": "string"
                }
            }
        },
        "game_session.GameSession": {
            "type": "object",
            "properties": {
                "cash": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "holdings_value": {
                    "type": "number"
                },
                "metadata": {
                    "$ref": "#/definitions/game_session.SessionMetadata"
                },
                "session_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/game_session.GameSessionStatus"
                },
                "total_balance": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "game_session.GameSessionStatus": {
            "type": "string",
            "enum": [
                "starting",
                "week1",
                "week2",
                "week3",
                "week4",
                "week5",
                "finished",
                "expired"
            ],
            "x-enum-varnames": [
                "StatusStarting",
                "StatusWeek1",
                "StatusWeek2",
                "StatusWeek3",
                "StatusWeek4",
                "StatusWeek5",
                "StatusFinished",
                "StatusExpired"
            ]
        },
        "game_session.HoldingInfo": {
            "type": "object",
            "properties": {
                "quantity": {
                    "type": "integer"
                },
                "total_spent": {
                    "type": "number"
                }
            }
        },
        "game_session.SessionMetadata": {
            "type": "object",
            "properties": {
                "holdings": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/game_session.HoldingInfo"
                    }
                }
            }
        },
        "game_session.createSessionRequest": {
            "description": "Request body for creating a new session",
            "type": "object",
            "required": [
                "categories",
                "username"
            ],
            "properties": {
                "categories": {
                    "description": "@Description List of exactly 3 stock categories\n@Required\n@MinItems 3\n@MaxItems 3",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['tech'",
                        "'healthcare'",
                        "'energy']"
                    ]
                },
                "username": {
                    "description": "@Description User's display name\n@Required",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "game_session.createSessionResponse": {
            "description": "Response for session creation",
            "type": "object",
            "properties": {
                "sessionId": {
                    "description": "@Description Unique session identifier",
                    "type": "string",
                    "example": "abc123def456"
                }
            }
        },
        "game_session.tradeRequest": {
            "description": "Request body for trading stocks",
            "type": "object",
            "required": [
                "quantity",
                "ticker"
            ],
            "properties": {
                "quantity": {
                    "description": "@Description Number of shares to trade\n@Required\n@Minimum 1",
                    "type": "integer",
                    "example": 100
                },
                "ticker": {
                    "description": "@Description Stock ticker symbol\n@Required",
                    "type": "string",
                    "example": "AAPL"
                }
            }
        },
        "gm_session.GMWeekData": {
            "type": "object",
            "properties": {
                "headlines": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "stocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/gm_session.StockWeekInsight"
                    }
                }
            }
        },
        "gm_session.StockWeekInsight": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "company_name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "price_change": {
                    "type": "number"
                },
                "rating_from": {
                    "type": "string"
                },
                "rating_to": {
                    "type": "string"
                },
                "ticker": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and the session ID.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Best Time To Buy Stock API",
	Description:      "A stock trading game API where users can practice trading with historical data.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
